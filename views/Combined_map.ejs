<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grievances Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .header {
            background-color: #6d0a85;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000; /* Ensure the header stays on top */
        }

        .header h1 {
            font-size: 24px;
        }

        .header .back-link {
            color: white;
            text-decoration: none;
            font-size: 18px;
        }

        .info-container {
            padding: 10px 20px;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin: 10px auto;
            border-radius: 5px;
            max-width: 1200px;
        }

        .info-container p {
            font-size: 16px;
            color: #333;
        }

        #combinedMap {
            height: calc(100vh - 120px); /* Make map height fill remaining space */
            width: 100%;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 20px;
            }

            #combinedMap {
                height: calc(100vh - 100px); /* Adjust map height on smaller screens */
            }

            .info-container p {
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            #combinedMap {
                height: calc(100vh - 80px); /* Adjust map height on mobile */
            }

            .header h1 {
                font-size: 18px;
            }

            .info-container p {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Grievances Map</h1>
        <a href="/api/dashbord/public#" class="back-link">‚Üê Back to Dashboard</a>
    </div>

    <div class="info-container">
        <p>This map displays all grievances along with their respective authorities within a 5km radius. Colors indicate the status of each complaint.</p>
    </div>

    <div id="combinedMap"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Initialize map
        const map = L.map('combinedMap').setView([22.651922, 88.431188], 15);

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // Function to determine color based on complaint status
        function getStatusColor(status) {
            if (status === "Resolved") return "#008000"; // Green
            if (status === "Pending") return "#FFFF00";  // Yellow
            if (status === "In Progress") return "#FFA500"; // Orange
            return "#FF0000"; // Red
        }

        // Get complaints and authorities data passed from the server
        const complaints = <%- JSON.stringify(complaints) %>;
        const authorities = <%- JSON.stringify(authorities) %>;
        
        console.log(authorities)
        console.log(complaints)


        // Function to calculate distance using Haversine formula
        function getDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * (Math.PI / 180);
            const dLon = (lon2 - lon1) * (Math.PI / 180);
            const a = Math.sin(dLat / 2) ** 2 +
                      Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                      Math.sin(dLon / 2) ** 2;
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        // Add complaint markers
        complaints.forEach(complaint => {
            const [complaintLng, complaintLat] = complaint.geometry.coordinates;
            let matchedAuthorities = [];

            const mainAuthorities=complaint.authoriti_ids
            .map(id=>authorities.find(auth=>auth._id==id)?.name)
            .filter(name=>name);

            authorities.forEach(authority => {
                const [authorityLng, authorityLat] = authority.geometry.coordinates;
                const distance = getDistance(complaintLat, complaintLng, authorityLat, authorityLng);

                if (distance <= 5) {
                    matchedAuthorities.push(authority.name);
                }
            });

            const color = getStatusColor(complaint.status);

            L.circleMarker([complaintLat, complaintLng], {
                radius: 8,
                color: color,
                fillColor: color,
                fillOpacity: 0.7
            }).addTo(map)
              .bindPopup(`
                  <b>Complaint No:</b> ${complaint.complaintNumber}<br>
                  <b>Status:</b> ${complaint.status}<br>
                  <b>Description:</b> ${complaint.description}<br>
                  <b>Main Authorities:</b> ${mainAuthorities.join(", ")}<br>
                  <b>Matched Authorities:</b> ${matchedAuthorities.join(", ")}<br>
                  <b><a href="${complaint.attachments}" target="_blank"><img src="${complaint.attachments}"  height=100px width=100px></img></a> </b> 

              `);
        });

        // Add authority markers with 5km radius
        authorities.forEach(authority => {
            const [lng, lat] = authority.geometry.coordinates;
            if (lng && lat) {
                L.marker([lat, lng]).addTo(map)
                  .bindPopup(`
                      <b>Name:</b> ${authority.name}<br>
                      <b>Role:</b> ${authority.role}
                  `);

                L.circle([lat, lng], {
                    radius: 5000,
                    color: 'blue',
                    fillColor: 'blue',
                    fillOpacity: 0.1,
                    interactive: false
                }).addTo(map);
            }
        });

        // Fit the map to show all markers
        const allCoordinates = [
            ...complaints.map(c => [c.geometry.coordinates[1], c.geometry.coordinates[0]]),
            ...authorities.map(a => [a.geometry.coordinates[1], a.geometry.coordinates[0]])
        ];

        if (allCoordinates.length > 0) {
            map.fitBounds(allCoordinates);
        }
    </script>
</body>
</html>
